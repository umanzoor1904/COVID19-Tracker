[{"D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\index.js":"1","D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\App.js":"2","D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\reportWebVitals.js":"3","D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\InfoBox.js":"4","D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\Table.js":"5","D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\util.js":"6","D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\LineGraph.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":3835,"mtime":1610334199830,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":1652,"mtime":1610261518144,"results":"12","hashOfConfig":"9"},{"size":500,"mtime":1610250964619,"results":"13","hashOfConfig":"9"},{"size":143,"mtime":1610158230457,"results":"14","hashOfConfig":"9"},{"size":3473,"mtime":1610334417789,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"shbtlu",{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\index.js",[],["34","35"],"D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\App.js",["36","37","38"],"import React, {useState, useEffect} from 'react';\nimport {FormControl, Select, MenuItem, Card, CardContent, Typography, Tab} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport {sortData} from './util';\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"All\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [caseType, setCaseType] = useState(\"active\");\n\n  useEffect(() => {\n    const getCountries = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ));\n        const sortedData = sortData(data);\n        setCountries(countries);\n        setTableData(sortedData);\n      })\n    };\n\n    getCountries();\n  }, []);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n      console.log(data);\n    })\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url = countryCode === 'All' ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    \n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      \n    })\n  }\n\n  const onCaseTypeChange = (e) => {\n    setCaseType(e.target.value);\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>C<img style={{transform: \"translate(0, 7px)\"}} src=\"https://img.icons8.com/nolan/48/coronavirus.png\"/>VID <span>Tracker</span></h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"standard\"\n              value={country}\n              onChange={onCountryChange}>\n                <MenuItem value =\"All\">All</MenuItem>\n                {countries.map(country => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <label for='active'>\n            <input id=\"active\" type=\"radio\" name=\"cases\" onChange={onCaseTypeChange} value=\"active\" defaultChecked/>\n            <InfoBox title=\"Active\" cases={countryInfo.todayCases} total={countryInfo.cases}/>\n            <span className='check'></span>\n          </label>\n          \n          <label for='recovered'>\n            <input id=\"recovered\" type=\"radio\" onChange={onCaseTypeChange} value=\"recovered\" name=\"cases\"/>\n            <InfoBox title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered} />\n            <span className='check'></span>\n          </label>\n            \n          <label for='deaths'>\n            <input id=\"deaths\" type=\"radio\" onChange={onCaseTypeChange} value=\"deaths\" name=\"cases\"/>\n            <InfoBox title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths} />\n            <span className='check'></span>\n          </label>\n        </div>\n        <LineGraph caseType={caseType} country={country} />\n      </div>\n\n      <div className=\"app__right\">\n          <Card>\n            <CardContent>\n              <h3>Total cases by country</h3>\n              <Table countries={tableData} />\n              \n            </CardContent>\n          </Card>\n          \n      </div>\n     \n    </div>\n  );\n}\n\nexport default App;\n","D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\reportWebVitals.js",[],"D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\InfoBox.js",[],"D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\Table.js",[],"D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\util.js",[],"D:\\Projects\\COVID19 Tracker\\covid19-tracker\\src\\LineGraph.js",["39","40"],"import React, {useState, useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\nimport { Card, CardContent } from '@material-ui/core';\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [{\r\n            type: \"time\",\r\n            time: {\r\n                parse: \"MM/DD/YY\",\r\n                tooltipFormat: \"ll\",\r\n            },\r\n        },],\r\n        yAxes: [{\r\n            gridLines: {\r\n                display: false,\r\n            },\r\n            ticks: {\r\n                callback: function(value, index, values) {\r\n                    return numeral(value).format(\"0a\");\r\n                },\r\n            },\r\n        },],\r\n    },\r\n};\r\n\r\nconst getChartData = (data) => {\r\n    let chartData = [];\r\n    let lastPoint;\r\n\r\n    for(let date in data){\r\n        if(lastPoint){\r\n            let newPoint = {\r\n                x: date,\r\n                y: data[date] - lastPoint\r\n            }\r\n            chartData.push(newPoint);\r\n        }\r\n        lastPoint = data[date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({caseType, country}) {\r\n    const [data, setData] = useState({});\r\n    const [borderColor, setBorderColor] = useState(\"\");\r\n    const [bgColor, setBgColor] = useState(\"\");\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(`https://disease.sh/v3/covid-19/historical/${country}?lastdays=25`)\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    \r\n                let chartData = country !== \"All\" ? data.timeline : data;\r\n\r\n                console.log(data);\r\n                if(caseType == \"active\") \r\n                {\r\n                    setData(getChartData(chartData.cases));\r\n                    setBgColor(\"#003ce1\");\r\n                }\r\n                \r\n                if(caseType === \"recovered\") \r\n                {\r\n                    setData(getChartData(chartData.recovered));\r\n                    setBgColor(\"#30b400\");\r\n                }\r\n                \r\n                if(caseType === \"deaths\") \r\n                {\r\n                    setData(getChartData(chartData.deaths));\r\n                    setBgColor(\"#e1003c\");\r\n                }\r\n            });\r\n             \r\n        };\r\n        fetchData();\r\n               \r\n    }, [caseType, country]);\r\n\r\n    return (\r\n        \r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Card>\r\n                    <CardContent>\r\n                <Line\r\n                height={350}\r\n                width={800}\r\n                options={options}\r\n                data={{\r\n                    datasets: [{\r\n                        backgroundColor: bgColor,\r\n                        borderColor: borderColor,\r\n                        data: data,\r\n                        label: caseType,\r\n                    }],\r\n                }}                \r\n            />\r\n            </CardContent>\r\n            </Card>\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n",["41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":2,"column":59,"nodeType":"49","messageId":"50","endLine":2,"endColumn":69},{"ruleId":"47","severity":1,"message":"51","line":2,"column":71,"nodeType":"49","messageId":"50","endLine":2,"endColumn":74},{"ruleId":"52","severity":1,"message":"53","line":70,"column":16,"nodeType":"54","endLine":70,"endColumn":117},{"ruleId":"47","severity":1,"message":"55","line":66,"column":25,"nodeType":"49","messageId":"50","endLine":66,"endColumn":39},{"ruleId":"56","severity":1,"message":"57","line":79,"column":29,"nodeType":"58","messageId":"59","endLine":79,"endColumn":31},{"ruleId":"43","replacedBy":"60"},{"ruleId":"45","replacedBy":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'Tab' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setBorderColor' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["62"],["63"],"no-global-assign","no-unsafe-negation"]